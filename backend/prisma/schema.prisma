// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CodeStatus {
  UNUSED
  ACTIVATED
}

enum UserRole {
  ADMIN
  USER
}

enum GameStatus {
  DRAFT
  PUBLISHED
}

enum LogType {
  // 用户相关操作
  USER_REGISTER
  USER_LOGIN
  USER_LOGIN_FAILED
  USER_LOGOUT
  USER_PASSWORD_CHANGE
  USER_PROFILE_UPDATE
  USER_ACCOUNT_DELETE_REQUEST
  USER_ACCOUNT_DELETE_CANCEL
  USER_ACCOUNT_DELETED
  
  // 游戏相关操作
  GAME_ACTIVATION
  GAME_ACTIVATION_FAILED
  GAME_PLAY_VALID  // 有效游玩记录（满一分钟）
  
  // 激活码相关操作
  CODE_ACTIVATION_SUCCESS
  CODE_ACTIVATION_FAILED
  CODE_ALREADY_USED
  CODE_NOT_FOUND
  CODE_EXPIRED
  
  // 文件操作
  FILE_UPLOAD
  FILE_UPLOAD_FAILED
  FILE_DELETE
  
  // 管理员操作
  ADMIN_USER_CREATE
  ADMIN_USER_UPDATE
  ADMIN_USER_DELETE
  ADMIN_GAME_CREATE
  ADMIN_GAME_UPDATE
  ADMIN_GAME_DELETE
  ADMIN_CODE_CREATE
  ADMIN_CODE_UPDATE
  ADMIN_CODE_DELETE
  ADMIN_SETTINGS_UPDATE
  ADMIN_LOGIN
  ADMIN_LOGOUT
  
  // 系统操作
  SYSTEM_ERROR
  SYSTEM_WARNING
  SYSTEM_MAINTENANCE_START
  SYSTEM_MAINTENANCE_END
  
  // 安全相关操作
  SECURITY_UNAUTHORIZED_ACCESS
  SECURITY_RATE_LIMIT_EXCEEDED
  SECURITY_SUSPICIOUS_ACTIVITY
  SECURITY_IP_BLOCKED
}

model User {
  id                  String           @id @default(uuid())
  username            String           @unique
  email               String           @unique
  password            String
  role                UserRole         @default(USER) // 用户角色
  lastLoginAt         DateTime? // 新增：记录最后一次登录时间，用于单点登录
  // 账号注销相关字段（用户提交注销请求后记录冷静期与生效时间）
  deletionRequestedAt DateTime?
  deletionEffectiveAt DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  activationCodes     ActivationCode[]
  activatedGamesCount Int              @default(0) // 性能优化字段

  // 用户激活的游戏（多对多关系）
  activatedGames UserGameActivation[]

  // 作为行为发起者（Actor）产生的日志
  actorLogs Log[] @relation("ActorUserLogs")

  // 作为被操作对象（Target）产生的日志
  targetLogs Log[] @relation("TargetUserLogs")
  passwordHistories PasswordHistory[]
}

model Game {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  path            String           @unique // 游戏文件目录名
  coverImage      String? // 封面图片文件名
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activationCodes ActivationCode[]
  activationCount Int              @default(0) // 激活次数统计
  playCount       Int              @default(0) // 新增：有效游玩次数统计
  status          GameStatus       @default(DRAFT) // 游戏状态
  logs            Log[]

  // 激活此游戏的用户（多对多关系）
  activatedByUsers UserGameActivation[]
}

// 用户游戏激活记录表
model UserGameActivation {
  id          String   @id @default(uuid())
  userId      String
  gameId      String
  activatedAt DateTime @default(now()) // 激活时间
  
  // 激活时使用的激活码ID（可选，用于审计）
  activationCodeId String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId]) // 确保用户对同一游戏只能有一条激活记录
  @@index([userId])
  @@index([gameId])
  @@index([activatedAt])
}

model ActivationCode {
  id          String     @id @default(uuid())
  code        String     @unique
  status      CodeStatus @default(UNUSED)
  createdAt   DateTime   @default(now())
  activatedAt DateTime?

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?
  logs   Log[]
}

model Log {
  id               String          @id @default(uuid())
  message          String          @db.VarChar(500)
  createdAt        DateTime        @default(now())
  type             LogType
  user             User?           @relation("ActorUserLogs", fields: [userId], references: [id], onDelete: SetNull)
  userId           String?
  game             Game?           @relation(fields: [gameId], references: [id])
  gameId           String?
  activationCode   ActivationCode? @relation(fields: [activationCodeId], references: [id])
  activationCodeId String?

  // 目标用户（例如管理员对用户进行操作时）
  targetUser   User?   @relation("TargetUserLogs", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetUserId String?

  // 请求上下文信息
  ip        String? @db.VarChar(45)
  userAgent String? @db.VarChar(512)

  // 结构化详情（如变更前后、备注等）
  metadata Json?

  @@index([type, createdAt])
  @@index([userId, createdAt])
  @@index([gameId, createdAt])
  @@index([activationCodeId, createdAt])
  @@index([targetUserId, createdAt])
}

// 系统设置表
model SystemSettings {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 密码历史（用于密码重用校验）
model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String   // 已加密密码
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

// 邮件相关功能完全基于Redis和系统设置实现，不需要额外数据表
