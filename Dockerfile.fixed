# 多阶段构建 - 阶段1: 构建前端
FROM node:20-alpine AS frontend-build

WORKDIR /app/frontend

# 复制前端的 package 文件
COPY frontend/package*.json ./

# 安装前端依赖
RUN npm install --no-audit --no-fund

# 复制前端源代码
COPY frontend/ ./

# 从根目录统一 .env 中抽取以 VITE_ 开头的变量生成前端使用的 .env.production.local
# 仅保留 VITE_ 行，避免将后端敏感变量写入镜像层
COPY .env /tmp/root.env
RUN grep '^VITE_' /tmp/root.env > .env.production.local || true

# 构建前端应用
RUN npm run build

# 多阶段构建 - 阶段2: 构建后端
FROM node:20-alpine AS backend-build

WORKDIR /app/backend

# 复制后端的 package 文件
COPY backend/package*.json ./

# 安装后端依赖（包括 devDependencies 用于构建）
RUN npm install --no-audit --no-fund

# 复制后端源代码
COPY backend/ ./

# 构建 TypeScript 代码
RUN npm run build

# 最终阶段: 运行时环境
FROM node:20-alpine AS production

# 安装必要的工具
RUN apk add --no-cache wget

# 创建应用目录
WORKDIR /app

ENV NODE_ENV=production

# 复制后端构建产物和必要文件
COPY --from=backend-build /app/backend/dist ./backend/dist
COPY --from=backend-build /app/backend/package*.json ./backend/
COPY --from=backend-build /app/backend/prisma ./backend/prisma/

# 复制前端构建产物
COPY --from=frontend-build /app/frontend/dist ./frontend/dist

# 复制启动脚本
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# 创建上传目录
RUN mkdir -p /app/backend/uploads/covers /app/backend/uploads/games /app/backend/uploads/temp

# 切换到后端目录并安装生产依赖
WORKDIR /app/backend
RUN npm install --only=production --no-audit --no-fund

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
  CMD wget -q -O - http://127.0.0.1:3000/health || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]